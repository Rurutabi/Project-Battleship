(()=>{"use strict";class t{constructor(t){this.shipLength=t>=0?Array.from({length:t},(()=>1)):-1}hits(t){this.shipLength[t]=0,this.isSunk()}isSunk(){this.shipLength.every((t=>0===t))&&(this.shipLength="sunken ship")}}new class{container=document.getElementById("container");subMarine=new t(2);destoryer=new t(4);arrayBoard=Array.from({length:10},(()=>Array.from({length:10},(()=>""))));constructor(){this.createBoard(),this.placeship(48,this.subMarine),console.log(this.arrayBoard)}createBoard(){const t=document.createElement("div");t.classList.add("board-container"),this.container.appendChild(t);for(let e=0;e<10;e++)for(let e=0;e<10;e++){const e=document.createElement("div");e.classList.add("cell"),t.appendChild(e)}}placeship(t,e){let r=this.getRow(t),n=this.getCol(t);if(!(n+e.shipLength.length<=10))return"out of bound";for(let t=0;t<e.shipLength.length;t++)this.arrayBoard[r][n]=e.shipLength[t],n<=10?n++:(r++,n=0)}receiveAttack(){}missedShot(){}reportSunk(){}getRow(t){return Math.floor(t/10)}getCol(t){return t%10}isWithinBound(t,e){return t>-1&&t<11&&e>-1&&e<11}}})();